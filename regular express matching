public class Solution {
    public boolean isMatch(String s, String p) {
        if(s == null || p == null){
            return false;
        }
        char[] s1 = s.toCharArray();
        char[] p1 = p.toCharArray();
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[0][0] = true;
        //deal with *a, *a*b, *a*b*c situations. One important thing is that the dp matrix has one more row and one more colume,          compared with the length tof the string s and p. So in the for loop, if we want to get dp[i][j], we look at the relation          between s[i - 1] and p[i - 1].
        for(int i = 1; i < dp[0].length; i++){
            if(p1[i - 1] == '*'){
                dp[0][i] = dp[0][i-2];
            }
        }
        
        for(int i = 1; i < dp.length; i++){
            for(int j = 1; j< dp[0].length; j++){
                if(s1[i - 1] == p1[j - 1] || p1[j - 1] == '.'){
                    dp[i][j] = dp[i - 1][j - 1];
                } else 
                if(p1[j - 1] == '*'){
                    dp[i][j] = dp[i][j - 2];
                    if(s1[i - 1] == p1[j - 2] || p1[j - 2] == '.'){
                        dp[i][j] = dp[i][j] == true? true: dp[i - 1][j];
                    }
                    
                }
                else dp[i][j] = false;
                
            }
        }
        return dp[s.length()][p.length()];  
    }
}