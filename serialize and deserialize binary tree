/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null){
            return null;
        }
        Queue<TreeNode> q = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode temp = q.poll();
            if(temp == null){
                sb.append("n");
            } else {
                sb.append(String.value(temp.val));
            }
            sb.append(" ");
            if(temp != null){
                q.offer(temp.left);
                q.offer(temp.right);
            }
        }
        System.out.println(sb.toString());
        return sb.toString();  
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null){
            return null;
        }
    
        String[] strs = data.split(" ");
        
        int n = strs.length;
        Queue<TreeNode> q = new LinkedList<>();
        TreeNode root = new TreeNode(Integer.parseInt(strs[0]));
        q.offer(root);
        
        for(int i = 1; i < n ; i++){
            TreeNode node = q.poll();
            if(node != null){
                if(!strs[i].equals("n")) {
                    node.left = new TreeNode(Integer.parseInt(strs[i]));
                    q.offer(node.left);
                }
                if(i + 1 < n){ 
                    if (!strs[i + 1].equals("n")){
                        node.right = new TreeNode(Integer.parseInt(strs[++i]));
                        q.offer(node.right);
                    } else {
                        i++;
                    }    
                }  
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));